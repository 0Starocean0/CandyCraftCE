//最后解决
//keys
HELPER.single(TELEPORTER, BlockTeleporter::new,
        LOOT_NONE, EXCLUDE_SUGARY_BLOCK, VTAG_MINEABLE_WITH_PICKAXE, RENDERER_TYPE_CUTOUT);
//-------------------

        HELPER.single(PUDDING, () -> new Block(Properties.copy(Blocks.DIRT)), CCBlockManager::simpleBlockItem,
                MODEL_SIMPLE, LOOT_DROP_SELF, VTAG_MINEABLE_WITH_SHOVEL, CANDY_PLANT_CAN_PLACE_ON.getGroupId());
        HELPER.single(CUSTARD_PUDDING, BlockCustardPudding::new, CCBlockManager::simpleBlockItem,
                VTAG_MINEABLE_WITH_SHOVEL, CANDY_PLANT_CAN_PLACE_ON.getGroupId());
        HELPER.single(PUDDING_FARMLAND, BlockPuddingFarmland::new,
                VTAG_MINEABLE_WITH_SHOVEL, CANDY_PLANT_CAN_PLACE_ON.getGroupId());


HELPER.single(CANDY_CANE_BLOCK, () -> new Block(Properties.copy(Blocks.STONE)), CCBlockManager::simpleBlockItem,
        MODEL_COLUMN, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);
HELPER.single(CANDY_CANE_WALL, () -> new WallBlock(Properties.copy(CANDY_CANE_BLOCK.getBlock())), CCBlockManager::simpleBlockItem,
        VTAG_MINEABLE_WITH_PICKAXE, VTAG_WALLS, LOOT_DROP_SELF);
HELPER.single(CANDY_CANE_FENCE, () -> new FenceBlock(Properties.copy(CANDY_CANE_BLOCK.getBlock())), CCBlockManager::simpleBlockItem,
        VTAG_MINEABLE_WITH_PICKAXE, VTAG_FENCES, LOOT_DROP_SELF);
HELPER.single(CANDY_CANE_SLAB, () -> new SlabBlock(Properties.copy(CANDY_CANE_BLOCK.getBlock()).noOcclusion()), CCBlockManager::simpleBlockItem,
        LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
HELPER.single(CANDY_CANE_STAIRS, () -> new StairBlock(CANDY_CANE_BLOCK.getBlock().defaultBlockState(), Properties.copy(CANDY_CANE_BLOCK.getBlock())), CCBlockManager::simpleBlockItem,
        LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);

HELPER.single(MARSHMALLOW_CRAFTING_TABLE, BlockMarshmallowCraftingTable::new, CCBlockManager::simpleBlockItem,
        MODEL_COLUMN, LOOT_DROP_SELF, VTAG_MINEABLE_WITH_AXE);
HELPER.single(LICORICE_FURNACE, BlockLicoriceFurnace::new, CCBlockManager::simpleBlockItem,
        MODEL_SP_FURNACE, LOOT_DROP_SELF, VTAG_MINEABLE_WITH_PICKAXE);
HELPER.single(CHOCOLATE_FURNACE, BlockChocolateFurnace::new, CCBlockManager::simpleBlockItem,
        MODEL_SP_FURNACE, LOOT_DROP_SELF, VTAG_MINEABLE_WITH_PICKAXE);
HELPER.single(SUGAR_FACTORY, BlockSugarFactory::new, CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, LOOT_DROP_SELF, VTAG_MINEABLE_WITH_PICKAXE);
HELPER.single(ADVANCED_SUGAR_FACTORY, BlockAdvancedSugarFactory::new, CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, LOOT_DROP_SELF, VTAG_MINEABLE_WITH_PICKAXE);
//树苗
HELPER.batch((n, a) -> new BlockCandySapling((AbstractTreeGrower) a[0]), (n, b, a) -> simpleBlockItem(b),
                MODEL_CROSS, VTAG_SAPLINGS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT)
        .addElement(CHOCOLATE_SAPLING, CCTreeGrowers.CHOCOLATE_TREE_GROWER)
        .addElement(WHITE_CHOCOLATE_SAPLING, CCTreeGrowers.CHOCOLATE_TREE_GROWER)
        .addElement(CARAMEL_SAPLING, CCTreeGrowers.CHOCOLATE_TREE_GROWER)
        .addElement(CANDIED_CHERRY_SAPLING, CCTreeGrowers.CHOCOLATE_TREE_GROWER)
        .register();
//原木
HELPER.batch((n, a) -> new RotatedPillarBlock(Properties.copy(Blocks.OAK_LOG)), (n, b, a) -> simpleBlockItem(b),
                MODEL_LOG, VTAG_LOGS, VTAG_MINEABLE_WITH_AXE, CItemTags.MARSHMALLOW_LOG.getGroupId(), LOOT_DROP_SELF)
        .addElement(MARSHMALLOW_LOG)
        .addElement(DARK_MARSHMALLOW_LOG)
        .addElement(LIGHT_MARSHMALLOW_LOG)
        .register();
//木板
HELPER.batch((n, a) -> new Block(Properties.copy(Blocks.OAK_PLANKS)), (n, b, a) -> simpleBlockItem(b),
                MODEL_SIMPLE, VTAG_MINEABLE_WITH_AXE, CItemTags.MARSHMALLOW_PLANKS.getGroupId(), LOOT_DROP_SELF)
        .addElement(MARSHMALLOW_PLANKS)
        .addElement(DARK_MARSHMALLOW_PLANKS)
        .addElement(LIGHT_MARSHMALLOW_PLANKS)
        .register();
//树叶
HELPER.batch((n, a) -> new LeavesBlock(Properties.copy(Blocks.OAK_LEAVES)), (n, b, a) -> simpleBlockItem(b),
                MODEL_SIMPLE, VTAG_LEAVES, RENDERER_TYPE_CUTOUT)
        .addElement(CHOCOLATE_LEAVES)
        .addElement(WHITE_CHOCOLATE_LEAVES)
        .addElement(CARAMEL_LEAVES)
        .addElement(CANDIED_CHERRY_LEAVES)
        .addElement(MAGIC_LEAVES)
        .register();

//火把
HELPER.single(HONEYCOMB_TORCH, () -> new TorchBlock(Properties.copy(Blocks.TORCH), ParticleTypes.FLAME),
        LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
HELPER.single(WALL_HONEYCOMB_TORCH, () -> new WallTorchBlock(Properties.copy(Blocks.WALL_TORCH).lootFrom(HONEYCOMB_TORCH), ParticleTypes.FLAME),
        LOOT_NONE, RENDERER_TYPE_CUTOUT, EXCLUDE_AUTO_GENERATE_LANG);
HELPER.BLOCKITEM_HELPER.single(HONEYCOMB_TORCH, () -> new StandingAndWallBlockItem(HONEYCOMB_TORCH.getBlock(), WALL_HONEYCOMB_TORCH.getBlock(), defaultItemProperties()),
        EXCLUDE_AUTO_GENERATE_LANG);
//矿物
HELPER.single(JELLY_ORE, () -> new OreBlock(Properties.copy(Blocks.IRON_BLOCK)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_IRON_TOOL, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);
HELPER.single(NOUGAT_ORE, () -> new OreBlock(Properties.copy(Blocks.IRON_ORE), UniformInt.of(1, 5)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_IRON_TOOL, VTAG_MINEABLE_WITH_PICKAXE);
HELPER.single(LICORICE_ORE, () -> new OreBlock(Properties.copy(Blocks.STONE)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);
HELPER.single(HONEYCOMB_ORE, () -> new OreBlock(Properties.copy(Blocks.IRON_ORE), UniformInt.of(0, 3)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_STONE_TOOL, VTAG_MINEABLE_WITH_PICKAXE);
HELPER.single(PEZ_ORE, () -> new OreBlock(Properties.copy(Blocks.DIAMOND_ORE)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_IRON_TOOL, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);


HELPER.single(LICORICE_BLOCK, () -> new Block(Properties.copy(Blocks.STONE)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_STONE_TOOL, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);
HELPER.single(LICORICE_SLAB, () -> new SlabBlock(Properties.copy(LICORICE_BLOCK.getBlock()).noOcclusion()), CCBlockManager::simpleBlockItem,
        MODEL_SP_SLAB, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
HELPER.single(LICORICE_STAIRS, () -> new StairBlock(LICORICE_BLOCK.getBlock().defaultBlockState(), Properties.copy(CANDY_CANE_BLOCK.getBlock())), CCBlockManager::simpleBlockItem,
        MODEL_STAIRS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);

HELPER.single(LICORICE_BRICK, () -> new Block(Properties.copy(Blocks.STONE_BRICKS)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_STONE_TOOL, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);
HELPER.single(LICORICE_BRICK_SLAB, () -> new SlabBlock(Properties.copy(LICORICE_BLOCK.getBlock()).noOcclusion()), CCBlockManager::simpleBlockItem,
        MODEL_SP_SLAB, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
HELPER.single(LICORICE_BRICK_STAIRS, () -> new StairBlock(LICORICE_BLOCK.getBlock().defaultBlockState(), Properties.copy(CANDY_CANE_BLOCK.getBlock())), CCBlockManager::simpleBlockItem,
        MODEL_STAIRS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);

HELPER.single(NOUGAT_BLOCK, () -> new Block(Properties.copy(Blocks.IRON_BLOCK)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_IRON_TOOL, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);
HELPER.single(NOUGAT_HEAD, () -> new Block(Properties.copy(Blocks.IRON_BLOCK)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_IRON_TOOL, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);

HELPER.single(HONEYCOMB_BLOCK, () -> new Block(Properties.copy(Blocks.IRON_BLOCK)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_DIAMOND_TOOL, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);
HELPER.single(HONEYCOMB_LAMP, () -> new Block(Properties.copy(Blocks.GLOWSTONE).strength(1F)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);

HELPER.single(PEZ_BLOCK, () -> new Block(Properties.copy(Blocks.DIAMOND_BLOCK)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, VTAG_NEEDS_DIAMOND_TOOL, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF);

//蜘蛛网
HELPER.single(COTTON_CANDY_WEB, () -> new WebBlock(Properties.copy(Blocks.COBWEB)), CCBlockManager::simpleBlockItem,
        MODEL_CROSS, RENDERER_TYPE_CUTOUT);
HELPER.single(CHEWING_GUM_PUDDLE, BlockChewingGumPuddle::new, CCBlockManager::simpleBlockItem,
        MODEL_EXIST, MODEL_EXCLUDE_ITEM, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
//梯子
HELPER.single(MARSHMALLOW_LADDER, () -> new LadderBlock(Properties.copy(Blocks.LADDER)), CCBlockManager::simpleBlockItem,
        VTAG_CLIMBABLE, VTAG_MINEABLE_WITH_AXE, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
//门
HELPER.batch((n, b) -> new DoorBlock(Properties.copy(Blocks.OAK_DOOR)), CCBlockManager::simpleBlockItem,
                MODEL_SP_DOOR, LOOT_SP_DOOR, VTAG_MINEABLE_WITH_AXE, RENDERER_TYPE_CUTOUT)
        .addElement(MARSHMALLOW_DOOR)
        .addElement(LIGHT_MARSHMALLOW_DOOR)
        .addElement(DARK_MARSHMALLOW_DOOR)
        .register();
HELPER.batch((n, b) -> new FenceBlock(Properties.copy(MARSHMALLOW_PLANKS.getBlock())), CCBlockManager::simpleBlockItem,
                MODEL_SP_PLANKS_FENCE, LOOT_DROP_SELF, VTAG_FENCES, VTAG_MINEABLE_WITH_AXE, RENDERER_TYPE_CUTOUT)
        .addElement(MARSHMALLOW_FENCE)
        .addElement(LIGHT_MARSHMALLOW_FENCE)
        .addElement(DARK_MARSHMALLOW_FENCE)
        .register();
HELPER.batch((n, b) -> new FenceGateBlock(Properties.copy(MARSHMALLOW_PLANKS.getBlock())), CCBlockManager::simpleBlockItem,
                MODEL_SP_PLANKS_FENCE_GATE, LOOT_DROP_SELF, VTAG_FENCE_GATES, VTAG_MINEABLE_WITH_AXE, RENDERER_TYPE_CUTOUT)
        .addElement(MARSHMALLOW_FENCE_GATE)
        .addElement(LIGHT_MARSHMALLOW_FENCE_GATE)
        .addElement(DARK_MARSHMALLOW_FENCE_GATE)
        .register();
HELPER.batch((n, a) -> new SlabBlock(Properties.copy(MARSHMALLOW_PLANKS.getBlock()).noOcclusion()), CCBlockManager::simpleBlockItem,
                MODEL_SP_PLANKS_SLAB, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT)
        .addElement(MARSHMALLOW_SLAB)
        .addElement(LIGHT_MARSHMALLOW_SLAB)
        .addElement(DARK_MARSHMALLOW_SLAB)
        .register();

HELPER.batch((n, a) -> new StairBlock(((CBlockEntries) a[0]).getBlock().defaultBlockState(), Properties.copy(MARSHMALLOW_PLANKS.getBlock())), CCBlockManager::simpleBlockItem,
                MODEL_STAIRS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT)
        .addElement(MARSHMALLOW_STAIRS, MARSHMALLOW_PLANKS)
        .addElement(LIGHT_MARSHMALLOW_STAIRS, LIGHT_MARSHMALLOW_PLANKS)
        .addElement(DARK_MARSHMALLOW_STAIRS, DARK_MARSHMALLOW_PLANKS)
        .register();

//果冻
HELPER.batch((n, a) -> new BlockJelly((Float) a[0], (Float) a[1]), (n, b, a) -> simpleBlockItem(b),
                MODEL_SIMPLE, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF, RENDERER_TYPE_TRANSLUCENT)
        .addElement(TRAMPOJELLY, 2f, 0.2f)
        .addElement(RED_TRAMPOJELLY, 3f, 0.1f)
        .addElement(SOFT_TRAMPOJELLY, 2f, 0f)
        .addElement(JELLY_SHOCK_ABSORBER, 0f, 0f)
        .register();
HELPER.single(SENSITIVE_JELLY, BlockSensitiveJelly::new, CCBlockManager::simpleBlockItem,
        VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF, RENDERER_TYPE_TRANSLUCENT);

//糖刺
HELPER.batch((n, a) -> new BlockSpikes(), CCBlockManager::simpleBlockItem,
                MODEL_CROSS, VTAG_MINEABLE_WITH_PICKAXE, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT)
        .addElement(SUGAR_SPIKES)
        .addElement(CRANBERRY_SPIKES)
        .register();
//玻璃
HELPER.batch((n, a) -> new GlassBlock(Properties.copy(Blocks.GLASS)), (n, b, a) -> simpleBlockItem(b),
                MODEL_SIMPLE, CItemTags.CARAMEL_GLASS.getGroupId(), LOOT_DROP_SELF_WHEN_SILK_TOUCH, RENDERER_TYPE_CUTOUT)
        .addElement(CARAMEL_GLASS)
        .addElement(ROUND_CARAMEL_GLASS)
        .addElement(DIAMOND_CARAMEL_GLASS)
        .register();
HELPER.batch((n, a) -> new IronBarsBlock(Properties.copy(Blocks.GLASS_PANE)), (n, b, a) -> simpleBlockItem(b),
                MODEL_SP_CARAMEL_PANE, LOOT_DROP_SELF_WHEN_SILK_TOUCH, RENDERER_TYPE_CUTOUT)
        .addElement(CARAMEL_GLASS_PANE)
        .addElement(ROUND_CARAMEL_GLASS_PANE)
        .addElement(DIAMOND_CARAMEL_GLASS_PANE)
        .register();


//植物块
HELPER.batch((n, a) -> new Block(Properties.copy(Blocks.HAY_BLOCK)), (n, b, a) -> simpleBlockItem(b),
                MODEL_SIMPLE, LOOT_DROP_SELF)
        .addElement(MINT_BLOCK)
        .addElement(RASPBERRY_BLOCK)
        .addElement(BANANA_SEAWEEDS_BLOCK)
        .addElement(COTTON_CANDY_BLOCK)
        .register();
HELPER.single(CANDIED_CHERRY_SACK, () -> new Block(Properties.copy(Blocks.HAY_BLOCK)), CCBlockManager::simpleBlockItem,
        MODEL_BOTTOM_TOP, LOOT_DROP_SELF);
HELPER.single(CHEWING_GUM_BLOCK, () -> new SlimeBlock(Properties.copy(Blocks.SLIME_BLOCK).strength(2.5F)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, LOOT_DROP_SELF);

//棉花糖-其他
HELPER.single(COTTON_CANDY_SLAB, () -> new SlabBlock(Properties.copy(COTTON_CANDY_BLOCK.getBlock()).noOcclusion()), CCBlockManager::simpleBlockItem,
        MODEL_SP_SLAB, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
HELPER.single(COTTON_CANDY_STAIRS, () -> new StairBlock(COTTON_CANDY_BLOCK.getBlock().defaultBlockState(), Properties.copy(COTTON_CANDY_BLOCK.getBlock())), CCBlockManager::simpleBlockItem,
        MODEL_STAIRS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);

//甜草
HELPER.batch((n, a) -> new BlockCandyPlant(Properties.copy(Blocks.POPPY)) {
                    private String descriptionIdBuf;

                    //解决名字后带数字问题
                    @Override
                    public @NotNull String getDescriptionId() {
                        return descriptionIdBuf == null
                                ? descriptionIdBuf = Util.makeDescriptionId("block", ResourceUtils.prefix("sweet_grass"))
                                : descriptionIdBuf;
                    }
                }, (n, b, a) -> simpleBlockItem(b),
                MODEL_CROSS, LOOT_DROP_SELF_WHEN_SILK_TOUCH_OR_SHEARS, RENDERER_TYPE_CUTOUT, EXCLUDE_AUTO_GENERATE_LANG)
        .addElement(SWEET_GRASS_0)
        .addElement(SWEET_GRASS_1)
        .addElement(SWEET_GRASS_2)
        .addElement(SWEET_GRASS_3)
        .register();
//水生植物
HELPER.batch((n, a) -> new BlockCandyWaterPlant(Properties.of(Material.WATER_PLANT).noCollission().instabreak().sound(SoundType.WET_GRASS)), (n, b, a) -> simpleBlockItem(b),
                MODEL_CROSS, LOOT_DROP_SELF_WHEN_SILK_TOUCH_OR_SHEARS, RENDERER_TYPE_CUTOUT)
        .addElement(MINT)
        .addElement(ROPE_RASPBERRY)
        .addElement(BANANA_SEAWEED)
        .register();
//甜蜜花
HELPER.single(FRAISE_TAGADA_FLOWER, () -> new BlockCandyPlant(Properties.copy(Blocks.POPPY)), CCBlockManager::simpleBlockItem,
        MODEL_CROSS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
HELPER.single(GOLDEN_SUGAR_FLOWER, BlockGoldenSugarFlower::new, CCBlockManager::simpleBlockItem,
        MODEL_CROSS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
HELPER.single(ACID_MINT_FLOWER, BlockAcidMintFlower::new, CCBlockManager::simpleBlockItem,
        MODEL_CROSS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT);
//作物
HELPER.single(DRAGIBUS_CROPS, () -> new BlockCandyCrop(Properties.copy(Blocks.WHEAT), CItemEntries.DRAGIBUS),
        RENDERER_TYPE_CUTOUT
);
HELPER.single(LOLLIPOP_STEM, BlockLollipopStem::new,
        RENDERER_TYPE_CUTOUT);
HELPER.single(LOLLIPOP_BLOCK, BlockLollipop::new,
        MODEL_CROSS, RENDERER_TYPE_CUTOUT);

//冰淇淋
HELPER.batch((n, a) -> new Block(Properties.copy(Blocks.SNOW_BLOCK)), (n, b, a) -> simpleBlockItem(b),
                MODEL_SIMPLE, CItemTags.ICE_CREAM.getGroupId(), LOOT_DROP_SELF)
        .addElement(ICE_CREAM)
        .addElement(MINT_ICE_CREAM)
        .addElement(STRAWBERRY_ICE_CREAM)
        .addElement(BLUEBERRY_ICE_CREAM)
        .register();
HELPER.batch((n, a) -> new SlabBlock(Properties.copy(ICE_CREAM.getBlock()).noOcclusion()), CCBlockManager::simpleBlockItem,
                MODEL_SP_SLAB, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT)
        .addElement(ICE_CREAM_SLAB)
        .addElement(MINT_ICE_CREAM_SLAB)
        .addElement(STRAWBERRY_ICE_CREAM_SLAB)
        .addElement(BLUEBERRY_ICE_CREAM_SLAB)
        .register();
HELPER.batch((n, a) -> new StairBlock(((CBlockEntries) a[0]).getBlock().defaultBlockState(), Properties.copy(ICE_CREAM.getBlock())), CCBlockManager::simpleBlockItem,
                MODEL_STAIRS, LOOT_DROP_SELF, RENDERER_TYPE_CUTOUT)
        .addElement(ICE_CREAM_STAIRS, ICE_CREAM)
        .addElement(MINT_ICE_CREAM_STAIRS, MINT_ICE_CREAM)
        .addElement(STRAWBERRY_ICE_CREAM_STAIRS, STRAWBERRY_ICE_CREAM)
        .addElement(BLUEBERRY_ICE_CREAM_STAIRS, BLUEBERRY_ICE_CREAM)
        .register();
HELPER.single(GRENADINE_BLOCK, () -> new HalfTransparentBlock(Properties.copy(Blocks.ICE)), CCBlockManager::simpleBlockItem,
        MODEL_SIMPLE, LOOT_DROP_SELF_WHEN_SILK_TOUCH, RENDERER_TYPE_TRANSLUCENT);
//Barrier
HELPER.single(ULTIMATE_COMPRESSED_JAWBREAKER_BRICK, () -> new Block(Properties.copy(Blocks.BEDROCK)), CCBlockManager::simpleBlockItem,
        EXCLUDE_SUGARY_BLOCK, MODEL_SIMPLE, LOOT_NONE);
HELPER.single(ULTIMATE_COMPRESSED_JAWBREAKER_LIGHT, () -> new Block(Properties.copy(Blocks.BEDROCK).lightLevel((b) -> 14)), CCBlockManager::simpleBlockItem,
        EXCLUDE_SUGARY_BLOCK, MODEL_SIMPLE, LOOT_NONE);
//Portal
HELPER.single(CARAMEL_PORTAL, BlockCandylandPortal::new,
        VTAG_PORTALS, LOOT_NONE, RENDERER_TYPE_TRANSLUCENT);

//FLUIDS
HELPER.single(CFluidEntries.GRENADINE_STATIC, () -> new LiquidBlock(() -> (FlowingFluid) CFluidEntries.GRENADINE_STATIC.getFluid(), Properties.copy(Blocks.WATER)), CCBlockManager::simpleBlockItem, LOOT_NONE);

//		//DEBUG
//		HELPER.single(STRUCTURE_POINT, BlockStructurePoint::new, (b) -> new BlockItem(b.get(), new Item.Properties()),
//				LOOT_NONE, RENDERER_TYPE_TRANSLUCENT);
////============================

}

private static BlockItem simpleBlockItem(IEntryKey<Block> ignore, RegistryObject<Block> block, Object[] ignore2) {
return simpleBlockItem(block);
}

private static BlockItem simpleBlockItem(RegistryObject<Block> block) {
return new BlockItem(block.get(), defaultItemProperties());
}

public static void init() {
}

//================CLIENT ONLY==================//
@SubscribeEvent
@OnlyIn(Dist.CLIENT)
public static void onFMLClientSetup(FMLClientSetupEvent event) {
//rendererType
RenderType translucent = RenderType.translucent();//alpha=[0,255]
HELPER.getEntriesByGroup(RENDERER_TYPE_TRANSLUCENT).forEach(
        (k, v) -> ItemBlockRenderTypes.setRenderLayer(HELPER.getEntry(k), translucent));
RenderType cutout = RenderType.cutoutMipped();//alpha=0|255
HELPER.getEntriesByGroup(RENDERER_TYPE_CUTOUT).forEach(
        (k, v) -> ItemBlockRenderTypes.setRenderLayer(HELPER.getEntry(k), cutout));
}
}
