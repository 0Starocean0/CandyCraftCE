plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.4-SNAPSHOT" apply false
}

architectury {
    minecraft = minecraft_version
}
allprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = archives_base_name
    version = mod_version
    group = maven_group

    repositories {
        //Faster Repo For Chinese
        var aliyun = maven { url = "https://maven.aliyun.com/repository/public" }
        if (Boolean.parseBoolean(enable_cn_repo)) {
            remove(aliyun)
            addFirst(aliyun)
//        maven { url = "https://download.mcbbs.net/assets/" }
        }
        //================
        flatDir {
            dir rootProject.file("libs")
            content { includeGroup "native" }
        }

        maven { url = "https://modmaven.dev" }
        maven {
            url "https://cursemaven.com"
            content { includeGroup "curse.maven" }
        }
        maven { url = 'https://maven.parchmentmc.org' }

    }
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
subprojects {
    apply plugin: "dev.architectury.loom"

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:${parchment_version}")
        }

    }
}

tasks.register("FatRunClient") {
    group = "run"
    print "$name init"
    Task client = project(":fabric").runClient
    Task data = project(":forge").runData
    dependsOn(client.mustRunAfter(data), data)
}

//for github work flow
//================================================================//
tasks.register('drawJars') {
    group = "build"
    doLast {
        def outDir = new File("build/buildJars")
        outDir.eachDir { it.deleteDir() }
        def dir1 = new File(outDir, "modJars")
        dir1.mkdir()
        def dir2 = new File(outDir, "sourceJars")
        dir2.mkdir()
        def dir3 = new File(outDir, "devShadowJars")
        dir3.mkdir()
        def modName = "${archives_base_name}-${mod_version}"
        copy(new File("fabric/build/libs/${modName}.jar"), new File(dir1, "fabric/${modName}.jar"))
        copy(new File("forge/build/libs/${modName}.jar"), new File(dir1, "forge/${modName}.jar"))
        copy(new File("fabric/build/libs/${modName}-sources.jar"), new File(dir2, "fabric/${modName}-sources.jar"))
        copy(new File("forge/build/libs/${modName}-sources.jar"), new File(dir2, "forge/${modName}-sources.jar"))
        copy(new File("fabric/build/libs/${modName}-dev-shadow.jar"), new File(dir3, "fabric/${modName}-dev-shadow.jar"))
        copy(new File("forge/build/libs/${modName}-dev-shadow.jar"), new File(dir3, "forge/${modName}-dev-shadow.jar"))
    }
}

private static def copy(File from, File to) {
    from.withInputStream { i ->
        def toDir = to.getParentFile()
        toDir?.mkdirs()
        to.withOutputStream {
            i.transferTo it
        }
        println "Copied $from -> $to"
    }
}
//================================================================//

//declare repositories
println("=".repeat(64))
println("here in project $project.name")
println("repo here=>")
getRepositories().forEach { it ->
    try {
        if (it instanceof FlatDirectoryArtifactRepository) {
            println it.dirs
        } else println it.url
    } catch (Exception ignored) {
        println it
    }
}
println("repo end")
println("=".repeat(64))
//================================================================//