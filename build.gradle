plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

allprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        Locale.getDefault()
        var aliyun = maven { url = "https://maven.aliyun.com/repository/public" }
        remove(aliyun)
        addFirst(aliyun)
        maven { url = "https://download.mcbbs.net/assets/" }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = "https://modmaven.dev" }
        maven {
            url "https://www.cursemaven.com"
            content { includeGroup "curse.maven" }
        }
    }
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
subprojects {

    apply plugin: "dev.architectury.loom"

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:${rootProject.parchment_version}")
        }
    }
}
//for github work flow
//================================================================//
tasks.register("drawJars", {
    def outDir = new File("build/buildJars")
    outDir.mkdirs()
    def dir1 = new File(outDir, "modJars")
    dir1.mkdir()
    def dir2 = new File(outDir, "sourceJars")
    dir2.mkdir()
    def dir3 = new File(outDir, "devShadowJars")
    dir3.mkdir()
    def modName = "${rootProject.archivesBaseName}-${rootProject.mod_version}"
    copy(new File("fabric/build/libs/${modName}.jar"), new File(dir1, "fabric/${modName}.jar"))
    copy(new File("forge/build/libs/${modName}.jar"), new File(dir1, "forge/${modName}.jar"))
    copy(new File("fabric/build/libs/${modName}-sources.jar"), new File(dir2, "fabric/${modName}-sources.jar"))
    copy(new File("forge/build/libs/${modName}-sources.jar"), new File(dir2, "forge/${modName}-sources.jar"))
    copy(new File("fabric/build/libs/${modName}-dev-shadow.jar"), new File(dir3, "fabric/${modName}-dev-shadow.jar"))
    copy(new File("forge/build/libs/${modName}-dev-shadow.jar"), new File(dir3, "forge/${modName}-dev-shadow.jar"))
})

private static def copy(File from, File to) {
    println "Copying $from -> $to"
    from.withInputStream { i ->
        def toDir = to.getParentFile()
        toDir?.mkdirs()
        to.withOutputStream {
            i.transferTo it
        }
    }
}
//================================================================//
//declare repositories
println("=".repeat(64))
println("here in project $project.name")
println("repo here=>")
getRepositories().forEach { println it.url }
println("repo end")
println("=".repeat(64))
//================================================================//