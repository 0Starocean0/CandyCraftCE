/*材料*/
//HELPER.single(LICORICE, CCItemManager::simpleItem, GENERATED, CItemTags.LICORICE.getGroupId());
//HELPER.single(HONEYCOMB, CCItemManager::simpleItem, GENERATED, CItemTags.HONEYCOMB.getGroupId());
//HELPER.single(HONEYCOMB_SHARD, CCItemManager::simpleItem, GENERATED);
//HELPER.single(PEZ, CCItemManager::simpleItem, GENERATED, CItemTags.PEZ.getGroupId());
HELPER.single(JAWBREAKER, CCItemManager::simpleItem, GENERATED, CItemTags.JAWBREAKER.getGroupId());
//简单物品
HELPER.batch((n, a) -> simpleItem(), GENERATED)
//        .addElement(MARSHMALLOW_STICK)
//        .addElement(SUGAR_CRYSTAL)
//        .addElement(COTTON_CANDY)
//        .addElement(GUMMY)
//        .addElement(HOT_GUMMY)
//        .addElement(CHOCOLATE_COIN)
//        .addElement(NOUGAT_POWDER)
//        .addElement(PEZ_DUST)
//        .addElement(WAFFLE)
//       .addElement(WAFFLE_NUGGET)
//        .addElement(CANDIED_CHERRY)
//        .addElement(CANDY_CANE)
//        .addElement(CHEWING_GUM)
//        .addElement(LOLLIPOP)
//        .addElement(CRANFISH_SCALE)
//        .addElement(CRANFISH)
//        .register();
//HELPER.single(CRANFISH_COOKED, CCItemManager::simpleItem,
//        GENERATED, EXCLUDE_AUTO_GENERATE_LANG);
HELPER.single(DRAGIBUS, () -> new ItemCustomNamedBlockItem(DRAGIBUS_CROPS.getBlock(), defaultItemProperties()),
        GENERATED);
HELPER.single(LOLLIPOP_SEEDS, () -> new ItemCustomNamedBlockItem(LOLLIPOP_STEM.getBlock(), defaultItemProperties()),
        GENERATED);
/*钥匙*/
HELPER.batch((n, a) -> new Item(defaultItemProperties().stacksTo(1).rarity(Rarity.UNCOMMON)), GENERATED)
        .addElement(JELLY_SENTRY_KEY)
        .addElement(JELLY_BOSS_KEY)
//        .register();
HELPER.batch((n, a) -> new ItemDungeonKey(defaultItemProperties().stacksTo(1).rarity(Rarity.RARE), (ItemDungeonKey.DungeonTypes) a[0]),
                GENERATED)
        .addElement(JELLY_DUNGEON_KEY, ItemDungeonKey.DungeonTypes.JELLY_DUNGEON)
        .addElement(BEETLE_DUNGEON_KEY, ItemDungeonKey.DungeonTypes.UNDEFINED)
        .addElement(SKY_DUNGEON_KEY, ItemDungeonKey.DungeonTypes.UNDEFINED)
        .addElement(SUGUARD_DUNGEON_KEY, ItemDungeonKey.DungeonTypes.UNDEFINED)
//        .register();
/*唱片(int analogOut,Supplier<SoundEvent> musicEvent)*/
HELPER.batch((n, a) -> {
            @SuppressWarnings("unchecked") final Supplier<SoundEvent> soundSup = (Supplier<SoundEvent>) a[1];
            return new RecordItem((int) a[0], soundSup, defaultItemProperties().stacksTo(1));
        }, GENERATED, CItemTagProvider.MUSIC_DISCS, EXCLUDE_AUTO_GENERATE_LANG)
        .addElement(RECORD_1, 1, CCSoundEvents.CD_1)
        .addElement(RECORD_2, 2, CCSoundEvents.CD_2)
        .addElement(RECORD_3, 3, CCSoundEvents.CD_3)
        .addElement(RECORD_4, 4, CCSoundEvents.CD_4)
//      .register();
HELPER.single(RECORD_WWWOOOWWW, () -> new RecordItem(15, CCSoundEvents.WWWOOOWWW, new Item.Properties().stacksTo(1).rarity(Rarity.EPIC)) {
            private final TextComponent item_n = new TextComponent("BreadNiceCat's Secret Record");
            private final TextComponent rec_n = new TextComponent("Mono Inc. - Children of the Dark");

            @Override
            public @NotNull Component getName(@NotNull ItemStack pStack) {
                return this.item_n;
            }

            @Override
            public @NotNull MutableComponent getDisplayName() {
                return rec_n;
            }
        },
        GENERATED, EXCLUDE_SUGARY, EXCLUDE_AUTO_GENERATE_LANG);
/*徽章*/
HELPER.batch((n, a) -> new ItemEmblem(),
                GENERATED, CItemTags.EMBLEM.getGroupId())
        .addElement(GINGERBREAD_EMBLEM)
        .addElement(JELLY_EMBLEM)
        .addElement(SKY_EMBLEM)
        .addElement(CHEWING_GUM_EMBLEM)
        .addElement(HONEYCOMB_EMBLEM)
        .addElement(CRANBERRY_EMBLEM)
        .addElement(NESSIE_EMBLEM)
        .addElement(SUGUARD_EMBLEM)
        .register();
/*装备*/
HELPER.single(FORK, ItemFork::new, HANDHELD);

HELPER.single(HONEYCOMB_ARROW, () -> new ArrowItem(defaultItemProperties()),
        GENERATED, CItemTags.CANDY_PROJECTILES.getGroupId());

HELPER.single(CARAMEL_CROSSBOW, ItemCaramelCrossbow::new);
HELPER.single(CARAMEL_BOW, ItemCaramelBow::new);
/*
工具(int flag[0->SWORD,1->SHOVEL,2->PICKAXE,3->AXE,4->HOE])
    --剑,镐,锄(Tier,int AttackDamageModifier, float AttackSpeedModifier)
    --铲,斧(Tier,float AttackDamageModifier, float AttackSpeedModifier)
参数长度:4
*/
HELPER.batch((n, a) -> {
            final Tier tier = (Tier) a[1];
            final float attackSpeedModifier = (float) a[3];
            final Item.Properties properties = defaultItemProperties();
            return switch ((int) a[0]) {
                case 0 -> new SwordItem(tier, (int) a[2], attackSpeedModifier, properties);
                case 1 -> new ShovelItem(tier, (float) a[2], attackSpeedModifier, properties);
                case 2 -> new PickaxeItem(tier, (int) a[2], attackSpeedModifier, properties);
                case 3 -> new AxeItem(tier, (float) a[2], attackSpeedModifier, properties);
                case 4 -> new HoeItem(tier, (int) a[2], attackSpeedModifier, properties);
                default -> throw new IllegalStateException();
            };

        }, HANDHELD)
        .addElement(MARSHMALLOW_SWORD, 0, CTiers.MARSHMALLOW, 3, -2.4F)
        .addElement(MARSHMALLOW_SHOVEL, 1, CTiers.MARSHMALLOW, 1.5F, -3.0F)
        .addElement(MARSHMALLOW_PICKAXE, 2, CTiers.MARSHMALLOW, 1, -2.8F)
        .addElement(MARSHMALLOW_AXE, 3, CTiers.MARSHMALLOW, 6F, -3.2F)
        .addElement(MARSHMALLOW_HOE, 4, CTiers.MARSHMALLOW, 0, -3.0F)

        .addElement(LICORICE_SWORD, 0, CTiers.LICORICE, 3, -2.4F)
        .addElement(LICORICE_SHOVEL, 1, CTiers.LICORICE, 1.5F, -3.0F)
        .addElement(LICORICE_PICKAXE, 2, CTiers.LICORICE, 1, -2.8F)
        .addElement(LICORICE_AXE, 3, CTiers.LICORICE, 7F, -3.2F)
        .addElement(LICORICE_HOE, 4, CTiers.LICORICE, -1, -2.0F)

        .addElement(HONEYCOMB_SWORD, 0, CTiers.HONEYCOMB, 3, -2.4F)
        .addElement(HONEYCOMB_SHOVEL, 1, CTiers.HONEYCOMB, 1.5F, -3.0F)
        .addElement(HONEYCOMB_PICKAXE, 2, CTiers.HONEYCOMB, 1, -2.8F)
        .addElement(HONEYCOMB_AXE, 3, CTiers.HONEYCOMB, 7F, -3.2F)
        .addElement(HONEYCOMB_HOE, 4, CTiers.HONEYCOMB, -1, -2.0F)

        .addElement(PEZ_SWORD, 0, CTiers.PEZ, 3, -2.4F)
        .addElement(PEZ_SHOVEL, 1, CTiers.PEZ, 1.5F, -3.0F)
        .addElement(PEZ_PICKAXE, 2, CTiers.PEZ, 1, -2.8F)
        .addElement(PEZ_AXE, 3, CTiers.PEZ, 5.0F, -3.0F)
        .addElement(PEZ_HOE, 4, CTiers.PEZ, 5, -3.0F)

        .addElement(JAWBREAKER_SWORD, 0, CTiers.JAWBREAKER, 3, -2.4F)
        .addElement(JAWBREAKER_SHOVEL, 1, CTiers.JAWBREAKER, 1.5F, -3.0F)
        .addElement(JAWBREAKER_PICKAXE, 2, CTiers.JAWBREAKER, 1, -2.8F)
        .addElement(JAWBREAKER_AXE, 3, CTiers.JAWBREAKER, 5.0F, -3.0F)
        .addElement(JAWBREAKER_HOE, 4, CTiers.JAWBREAKER, -4, 0F)

        .register();
/*盔甲(ArmorMaterial,int flag[0->HEAD,1->CHEST,2->LEGS,3->FEET])*/
HELPER.batch((n, a) -> {
            Item.Properties properties = defaultItemProperties();
            EquipmentSlot slot = EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, 3 - (int) a[1]);
            return new ArmorItem((ArmorMaterial) a[0], slot, properties);
        }, GENERATED)
        .addElement(LICORICE_HELMET, CArmorMaterials.LICORICE, 0)
        .addElement(LICORICE_CHESTPLATE, CArmorMaterials.LICORICE, 1)
        .addElement(LICORICE_LEGGINGS, CArmorMaterials.LICORICE, 2)
        .addElement(LICORICE_BOOTS, CArmorMaterials.LICORICE, 3)

        .addElement(HONEYCOMB_HELMET, CArmorMaterials.HONEYCOMB, 0)
        .addElement(HONEYCOMB_CHESTPLATE, CArmorMaterials.HONEYCOMB, 1)
        .addElement(HONEYCOMB_LEGGINGS, CArmorMaterials.HONEYCOMB, 2)
        .addElement(HONEYCOMB_BOOTS, CArmorMaterials.HONEYCOMB, 3)

        .addElement(PEZ_HELMET, CArmorMaterials.PEZ, 0)
        .addElement(PEZ_CHESTPLATE, CArmorMaterials.PEZ, 1)
        .addElement(PEZ_LEGGINGS, CArmorMaterials.PEZ, 2)
        .addElement(PEZ_BOOTS, CArmorMaterials.PEZ, 3)

        .addElement(JAWBREAKER_HELMET, CArmorMaterials.JAWBREAKER, 0)
        .addElement(JAWBREAKER_CHESTPLATE, CArmorMaterials.JAWBREAKER, 1)
        .addElement(JAWBREAKER_LEGGINGS, CArmorMaterials.JAWBREAKER, 2)
        .addElement(JAWBREAKER_BOOTS, CArmorMaterials.JAWBREAKER, 3)

        .addElement(JELLY_CROWN, CArmorMaterials.JELLY_CROWN, 0)
        .addElement(TRAMPOJELLY_BOOTS, CArmorMaterials.TRAMPOJELLY_BOOTS, 3)
        .register();
HELPER.single(WATER_MASK, ItemWaterMask::new, GENERATED);
HELPER.single(IIDEBUG, ItemIiDebug::new, MODEL_SP_DEBUG, EXCLUDE_SUGARY, EXCLUDE_AUTO_GENERATE_LANG);
HELPER.single(GRENADINE_BUCKET, () -> new BucketItem(CFluidEntries.GRENADINE_STATIC, defaultItemProperties().stacksTo(1)), GENERATED);



public static Item.Properties defaultItemProperties() {
return new Item.Properties().tab(CandycraftCE.TAB);
}

private static Item simpleItem() {
return new Item(defaultItemProperties());
}

//===============CLIENT ONLY================//
@SubscribeEvent
public static void onClientSetup(FMLClientSetupEvent evt) {
{
    //@see net.minecraft.client.renderer.item.ItemProperties.<cinit>
    Item bow = CARAMEL_BOW.getItem();
    Item crossbow = CARAMEL_CROSSBOW.getItem();
    ItemProperties.register(crossbow, new ResourceLocation("pull"), (pStack, pLevel, pEntity, pSeed) -> {
        if (pEntity == null) {
            return 0.0F;
        } else {
            return CrossbowItem.isCharged(pStack) ? 0.0F : (float) (pStack.getUseDuration() - pEntity.getUseItemRemainingTicks()) / (float) CrossbowItem.getChargeDuration(pStack);
        }
    });
    ItemProperties.register(crossbow, new ResourceLocation("pulling"), (p_174615_, p_174616_, livingEntity, p_174618_) ->
            livingEntity != null && livingEntity.isUsingItem() && livingEntity.getUseItem() == p_174615_ && !CrossbowItem.isCharged(p_174615_) ? 1.0F : 0.0F
    );
    ItemProperties.register(crossbow, new ResourceLocation("charged"), (p_174610_, p_174611_, livingEntity, p_174613_) ->
            livingEntity != null && CrossbowItem.isCharged(p_174610_) ? 1.0F : 0.0F
    );
    //		ItemProperties.register(crossbow, new ResourceLocation("firework"), (p_174605_, p_174606_, p_174607_, p_174608_) ->
//				p_174607_ != null && CrossbowItem.isCharged(p_174605_) && CrossbowItem.containsChargedProjectile(p_174605_, Items.FIREWORK_ROCKET) ? 1.0F : 0.0F);

    ItemProperties.register(bow, new ResourceLocation("pull"), (p_174635_, p_174636_, livingEntity, p_174638_) -> {
        if (livingEntity == null) {
            return 0.0F;
        } else {
            return livingEntity.getUseItem() != p_174635_ ? 0.0F : (float) (p_174635_.getUseDuration() - livingEntity.getUseItemRemainingTicks()) / 20.0F;
        }
    });
    ItemProperties.register(bow, new ResourceLocation("pulling"), (stack, clientLevel, livingEntity, p_174633_) ->
            livingEntity != null && livingEntity.isUsingItem() && livingEntity.getUseItem() == stack ? 1.0F : 0.0F);

}
}
}
